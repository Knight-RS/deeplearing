‘’‘
训练神经网络的基本步骤：
1.定义神经网络的结构和前向传播的输出结果
2.定义损失函数以及选择反向传播优化的算法 
3.生成会话并期望在训练数据上反复进行反向传播优化算法
‘’‘
import tensorflow as tf
import numpy as np
from numpy.random import RandomState

'''定义神经网络的参数'''
batch_size = 8
w1 = tf.Variable(tf.random_normal([2, 3],  stddev=1,  seed=1)) # 1为随机种子，只要随机种子seed相同，产生的随机数序列就相同
w2 = tf.Variable(tf.random_normal([3, 1],  stddev=1,  seed=1))
x = tf.placeholder(tf.float32,  shape=(None, 2), name='x_input')  # 在shape的一个维度上使用none可以方便使用不同的batch的大小
y_ = tf.placeholder(tf.float32,  shape=(None, 1), name='y_input')

'''定义神经网络前向传播过程，损失函数和反向传播的算法'''
a = tf.matmul(x, w1)
y = tf.matmul(a, w2)
y = tf.sigmoid(y)
# 输入一个张量A，把A中的每一个元素的值都压缩在min和max之间。目的是为了应对梯度爆发或者梯度消失的情况
cross_entropy = -tf.reduce_mean(y_ * tf.log(tf.clip_by_value(y, 1e-10, 1.0)) + (1-y_) * tf.log(tf.clip_by_value(y, 1e-10, 1.0)))

# 定义反向传播算法
learning_rate = 0.001
train_step = tf.train.AdamOptimizer(learning_rate).minimize(cross_entropy)

'''生成模拟数据集'''
rdm = RandomState(1)  # 1为随机种子，只要随机种子seed相同，产生的随机数序列就相同
dataset_size = 128
X = rdm.rand(dataset_size, 2) # 返回128行2列矩阵
Y = [[int(x1+x2 < 1)] for (x1, x2) in X]  # 这里x1+x2<1的样例被认为是正样本，实际中多用0表示负样本，1表示正样本

'''创建会话运行tensorflow'''
init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(init)
    writer = tf.summary.FileWriter('./graphs/simpleNN', sess.graph)

    # 输出目前未经训练的参数取值
    print("w1:")
    print(sess.run(w1))
    print("w2:")
    print(sess.run(w2))

    # 训练模型
    step = 5000
    for i in range(step):
        # 每次选取batch_size样本进行训练
        start = (i * batch_size) % dataset_size  # start取0 8 16 24 32 40 48 56 64 72 80 88 96 104 112 120 128
        end = min(start + dataset_size, dataset_size)  # end一直为128
        #         print(start)
        #         print(end)
        # 通过选取的样本训练神经网络并更新参数
        sess.run(train_step, feed_dict={x: X[start:end], y_: Y[start:end]})
        if i % 1000 == 0:
            total_cross_entropy = sess.run(cross_entropy, feed_dict={x: X, y_: Y})  # 把X数据送给x，Y数据送给y_
            print("After %d training step(s), cross entropy on all data is %g" % (i, total_cross_entropy))

    # 输出训练后的参数取值
    print("w1:")
    print(sess.run(w1))
    print("w2:")
    print(sess.run(w2))
